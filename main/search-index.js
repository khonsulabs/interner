var searchIndex = JSON.parse('{\
"interner":{"doc":"interner","t":[3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,6,6,6,3,6,6,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Iter","PoolKind","Pooled","as_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","from","global","hash","into","into","ptr_eq","shared","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","BufferPool","GlobalBuffer","GlobalPath","GlobalPool","GlobalString","PathPool","StaticPooledBuffer","StaticPooledPath","StaticPooledString","StringPool","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","fmt","from","from","from","from","get","get","get","get","get","get","get_static","get_static","get_static_with","get_static_with","get_static_with","into","into","into","into","new","pooled","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity_and_hasher","with_capacity_and_hasher_init","with_hasher","with_hasher_init","BufferPool","PathPool","SharedBuffer","SharedPath","SharedPool","SharedString","StringPool","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","from","get","get","get","into","pooled","to_owned","try_from","try_into","type_id","with_capacity_and_hasher","with_hasher"],"q":["interner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","interner::global","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","interner::shared","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over a interned pool.","A kind of interning pool. Currently there are only two …","A type that ensures only one copy of each value exists in …","Returns a pointer to the underlying storage.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Global interning pools.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if <code>this</code> and <code>other</code> point to the exact same …","Shared interning pools that have no global state.","","","","","","","","","A global byte buffer interning pool that manages …","A pooled buffer (<code>Vec&lt;u8&gt;</code>) that is stored in a <code>GlobalPool</code>.","A pooled path that is stored in a <code>GlobalPool</code>.","A global interned pool.","A pooled string that is stored in a <code>GlobalPool</code>.","A global path interning pool that manages <code>GlobalPath</code>s.","A lazily-initialized <code>GlobalBuffer</code> that stays allocated for …","A lazily-initialized <code>GlobalPath</code> that stays allocated for …","A lazily-initialized <code>GlobalString</code> that stays allocated for …","A global string interning pool that manages <code>GlobalString</code>s.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference-counted clone of the contained …","Returns a reference-counted clone of the contained …","Returns a reference-counted clone of the contained …","Returns a copy of an existing <code>GlobalString</code> if one is found.","Returns a copy of an existing <code>GlobalBuffer</code> if one is found.","Returns a copy of an existing <code>GlobalPath</code> if one is found. …","Returns a static pooled buffer, which keeps the pooled …","Returns a static pooled string, which keeps the pooled …","Returns a static pooled buffer, which keeps the pooled …","Returns a static pooled path, which keeps the pooled path …","Returns a static pooled string, which keeps the pooled …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new instance using <code>RandomState</code> for the internal …","Returns a collection of the currently pooled items.","","","","","","","","","","","","","Returns a new instance using the provided hasher with …","Returns a new instance using the function to load the …","Returns a new instance using the provided hasher.","Returns a new instance using the function to load the …","A path interning pool that manages <code>SharedBuffer</code>s.","A path interning pool that manages <code>SharedPath</code>s.","A pooled buffer that belongs to a <code>BufferPool</code>.","A pooled path that belongs to a <code>PathPool</code>.","A shared pool of values that ensures only one copy of any …","A pooled string that belongs to a <code>StringPool</code>.","A string interning pool that manages <code>SharedString</code>s.","","","","","","","","","Returns the argument unchanged.","Returns a copy of an existing <code>SharedString</code> if one is found.","Returns a copy of an existing <code>SharedPath</code> if one is found. …","Returns a copy of an existing <code>SharedBuffer</code> if one is …","Calls <code>U::from(self)</code>.","Returns a collection of the currently pooled items.","","","","","Creates a new pool using the provided <code>BuildHasher</code> for …","Creates a new pool using the provided <code>BuildHasher</code> for …"],"i":[0,0,0,1,1,26,1,26,1,1,1,1,1,1,1,1,1,1,1,1,1,26,0,1,1,26,1,0,1,1,1,26,1,26,1,26,0,0,0,0,0,0,0,0,0,0,12,14,16,10,12,14,16,10,10,10,10,12,14,16,10,12,14,16,10,10,10,10,10,10,10,10,12,14,16,10,10,10,12,14,16,10,12,14,16,10,12,14,16,10,10,10,10,10,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[0,0,0,[1],[[]],[[]],[[]],[[]],[1,1],[[]],[1],[[1,2],3],[[1,2],3],[1,3],[1,3],[[1,1],3],[[1,4],3],[[1,4],3],[[1,5],6],[[1,5],6],[[]],[[]],0,[1],[[]],[[]],[[1,1],3],0,[[]],[[],7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],3],[[10,11],3],[[10,5],6],[[]],[[]],[[]],[[]],[12,13],[14,15],[16,17],[[[10,[7]]],13],[[[10,[[19,[18]]]]],15],[[[10,[20]]],17],[[[10,[[19,[18]]]]],14],[[[10,[7]],2],12],[[[10,[[19,[18]]]]],14],[[[10,[20]]],16],[[[10,[7]]],12],[[]],[[]],[[]],[[]],[[],10],[10],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[21,10],[21,10],[[],10],[[],10],0,0,0,0,0,0,0,[[]],[[]],[11,11],[[]],[[],[[11,[22]]]],[[11,11],3],[[11,10],3],[[11,5],6],[[]],[[[11,[7]]],23],[[[11,[20]]],24],[[[11,[[19,[18]]]]],25],[[]],[11],[[]],[[],8],[[],8],[[],9],[21,[[11,[7]]]],[[],[[11,[7]]]]],"p":[[3,"Pooled"],[15,"str"],[15,"bool"],[3,"Path"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"GlobalPool"],[3,"SharedPool"],[3,"StaticPooledString"],[6,"GlobalString"],[3,"StaticPooledBuffer"],[6,"GlobalBuffer"],[3,"StaticPooledPath"],[6,"GlobalPath"],[15,"u8"],[3,"Vec"],[3,"PathBuf"],[15,"usize"],[3,"RandomState"],[6,"SharedString"],[6,"SharedPath"],[6,"SharedBuffer"],[3,"Iter"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
