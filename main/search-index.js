var searchIndex = JSON.parse('{\
"interner":{"doc":"interner","t":[8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,11,11,11,11,6,6,6,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["PoolKind","Pooled","borrow","borrow_mut","clone","clone_into","deref","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","global","hash","into","ptr_eq","shared","to_owned","to_string","try_from","try_into","type_id","BufferPool","GlobalBuffer","GlobalPath","GlobalPool","GlobalString","PathPool","StringPool","borrow","borrow_mut","eq","eq","fmt","from","get","get","get","into","new","try_from","try_into","type_id","with_capacity_and_hasher","with_capacity_and_hasher_init","with_hasher","with_hasher_init","BufferPool","PathPool","SharedBuffer","SharedPath","SharedPool","SharedString","StringPool","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","from","get","get","get","into","to_owned","try_from","try_into","type_id","with_capacity_and_hasher","with_hasher"],"q":["interner","","","","","","","","","","","","","","","","","","","","","","","","","","","interner::global","","","","","","","","","","","","","","","","","","","","","","","","","interner::shared","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A kind of interning pool. Currently there are only two …","A type that ensures only one copy of each value exists in …","","","","","","","","","","","","","","","Returns the argument unchanged.","Global interning pools.","","Calls <code>U::from(self)</code>.","Returns true if <code>this</code> and <code>other</code> point to the exact same …","Shared interning pools that have no global state.","","","","","","A global byte buffer interning pool that manages …","A pooled buffer (<code>Vec&lt;u8&gt;</code>) that is stored in a <code>GlobalPool</code>.","A pooled path that is stored in a <code>GlobalPool</code>.","A global interned pool.","A pooled string that is stored in a <code>GlobalPool</code>.","A global path interning pool that manages <code>GlobalPath</code>s.","A global string interning pool that manages <code>GlobalString</code>s.","","","","","","Returns the argument unchanged.","Returns a copy of an existing <code>GlobalString</code> if one is found.","Returns a copy of an existing <code>GlobalBuffer</code> if one is found.","Returns a copy of an existing <code>GlobalPath</code> if one is found. …","Calls <code>U::from(self)</code>.","Returns a new instance using <code>RandomState</code> for the internal …","","","","Returns a new instance using the provided hasher with …","Returns a new instance using the function to load the …","Returns a new instance using the provided hasher.","Returns a new instance using the function to load the …","A path interning pool that manages <code>SharedBuffer</code>s.","A path interning pool that manages <code>SharedPath</code>s.","A pooled buffer that belongs to a <code>BufferPool</code>.","A pooled path that belongs to a <code>PathPool</code>.","A shared pool of values that ensures only one copy of any …","A pooled string that belongs to a <code>StringPool</code>.","A string interning pool that manages <code>SharedString</code>s.","","","","","","","","","Returns the argument unchanged.","Returns a copy of an existing <code>SharedString</code> if one is found.","Returns a copy of an existing <code>SharedPath</code> if one is found. …","Returns a copy of an existing <code>SharedBuffer</code> if one is …","Calls <code>U::from(self)</code>.","","","","","Creates a new pool using the provided <code>BuildHasher</code> for …","Creates a new pool using the provided <code>BuildHasher</code> for …"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[0,0,[[]],[[]],[1,1],[[]],[1],[[1,2],3],[[1,4],3],[[1,4],3],[1,3],[1,3],[[1,1],3],[[1,2],3],[[1,5],6],[[1,5],6],[[]],0,[1],[[]],[[1,1],3],0,[[]],[[],7],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,[[]],[[]],[[10,10],3],[[10,11],3],[[10,5],6],[[]],[[[10,[7]]],12],[[[10,[[14,[13]]]]],15],[[[10,[16]]],17],[[]],[[],10],[[],8],[[],8],[[],9],[18,10],[18,10],[[],10],[[],10],0,0,0,0,0,0,0,[[]],[[]],[11,11],[[]],[[],[[11,[19]]]],[[11,11],3],[[11,10],3],[[11,5],6],[[]],[[[11,[7]]],20],[[[11,[16]]],21],[[[11,[[14,[13]]]]],22],[[]],[[]],[[],8],[[],8],[[],9],[18,[[11,[7]]]],[[],[[11,[7]]]]],"p":[[3,"Pooled"],[15,"str"],[15,"bool"],[3,"Path"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"GlobalPool"],[3,"SharedPool"],[6,"GlobalString"],[15,"u8"],[3,"Vec"],[6,"GlobalBuffer"],[3,"PathBuf"],[6,"GlobalPath"],[15,"usize"],[3,"RandomState"],[6,"SharedString"],[6,"SharedPath"],[6,"SharedBuffer"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
