var searchIndex = JSON.parse('{\
"interner":{"doc":"interner","t":"IDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLALLLLLGGGDGGDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGDGGLLLLLLLLLLLLLLLLLLLL","n":["PoolKind","Pooled","borrow","borrow_mut","clone","clone_into","cmp","deref","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","global","hash","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ptr_eq","shared","to_owned","to_string","try_from","try_into","type_id","BufferPool","GlobalBuffer","GlobalPath","GlobalPool","GlobalString","PathPool","StaticPooledBuffer","StaticPooledPath","StaticPooledString","StringPool","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get","get","get_static","get_static","get_static_with","get_static_with","get_static_with","into","into","into","into","new","pooled","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity_and_hasher","with_capacity_and_hasher_init","with_hasher","with_hasher_init","BufferPool","PathPool","SharedBuffer","SharedPath","SharedPool","SharedString","StringPool","borrow","borrow_mut","clone","clone_into","default","eq","eq","fmt","from","get","get","get","into","pooled","to_owned","try_from","try_into","type_id","with_capacity_and_hasher","with_hasher"],"q":[[0,"interner"],[38,"interner::global"],[105,"interner::shared"]],"d":["A kind of interning pool. Currently there are only two …","A type that ensures only one copy of each value exists in …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Global interning pools.","","Calls <code>U::from(self)</code>.","","","","","","","","Returns true if <code>this</code> and <code>other</code> point to the exact same …","Shared interning pools that have no global state.","","","","","","A global byte buffer interning pool that manages …","A pooled buffer (<code>Vec&lt;u8&gt;</code>) that is stored in a <code>GlobalPool</code>.","A pooled path that is stored in a <code>GlobalPool</code>.","A global interned pool.","A pooled string that is stored in a <code>GlobalPool</code>.","A global path interning pool that manages <code>GlobalPath</code>s.","A lazily-initialized <code>GlobalBuffer</code> that stays allocated for …","A lazily-initialized <code>GlobalPath</code> that stays allocated for …","A lazily-initialized <code>GlobalString</code> that stays allocated for …","A global string interning pool that manages <code>GlobalString</code>s.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a copy of an existing <code>GlobalPath</code> if one is found. …","Returns a copy of an existing <code>GlobalBuffer</code> if one is found.","Returns a copy of an existing <code>GlobalString</code> if one is found.","Returns a reference-counted clone of the contained …","Returns a reference-counted clone of the contained …","Returns a reference-counted clone of the contained …","Returns a static pooled string, which keeps the pooled …","Returns a static pooled buffer, which keeps the pooled …","Returns a static pooled string, which keeps the pooled …","Returns a static pooled path, which keeps the pooled path …","Returns a static pooled buffer, which keeps the pooled …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new instance using <code>RandomState</code> for the internal …","Returns a collection of the currently pooled items.","","","","","","","","","","","","","Returns a new instance using the provided hasher with …","Returns a new instance using the function to load the …","Returns a new instance using the provided hasher.","Returns a new instance using the function to load the …","A path interning pool that manages <code>SharedBuffer</code>s.","A path interning pool that manages <code>SharedPath</code>s.","A pooled buffer that belongs to a <code>BufferPool</code>.","A pooled path that belongs to a <code>PathPool</code>.","A shared pool of values that ensures only one copy of any …","A pooled string that belongs to a <code>StringPool</code>.","A string interning pool that manages <code>SharedString</code>s.","","","","","","","","","Returns the argument unchanged.","Returns a copy of an existing <code>SharedString</code> if one is found.","Returns a copy of an existing <code>SharedPath</code> if one is found. …","Returns a copy of an existing <code>SharedBuffer</code> if one is …","Calls <code>U::from(self)</code>.","Returns a collection of the currently pooled items.","","","","","Creates a new pool using the provided <code>BuildHasher</code> for …","Creates a new pool using the provided <code>BuildHasher</code> for …"],"i":[0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,7,14,11,8,7,14,11,8,14,11,8,7,7,14,11,8,7,14,11,8,7,14,11,8,7,7,7,14,11,8,7,7,7,7,7,7,14,11,8,7,7,7,14,11,8,7,14,11,8,7,14,11,8,7,7,7,7,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,[[]],[[]],[[[3,[[2,[1]],1]]],[[3,[[2,[1]],1]]]],[[]],[[[3,[[2,[1]],1]],[3,[[2,[1]],1]]],4],[[[3,[[2,[1]],1]]]],[[[3,[[2,[1]],1]]],5],[[[3,[[2,[1]],1]]],5],[[[3,[[7,[6,1]],1]],[8,[1]]],5],[[[3,[[7,[[10,[9]],1]],1]],[11,[1]]],5],[[[3,[[2,[1]],1]],12],5],[[[3,[[2,[1]],1]],12],5],[[[3,[[7,[13,1]],1]],[14,[1]]],5],[[[3,[[2,[1]],1]],15],5],[[[3,[[2,[1]],1]],15],5],[[[3,[[0,[[2,[1]],[16,[[2,[1]]]]]],1]],[3,[[2,[1]],1]]],5],[[[3,[[2,[1]],1]],17],18],[[[3,[[2,[1]],1]],17],18],[[]],0,[[[3,[[2,[1]],1]],19]],[[]],[[[3,[[2,[1]],1]],12],[[20,[4]]]],[[[3,[[2,[1]],1]]],[[20,[4]]]],[[[3,[[2,[1]],1]]],[[20,[4]]]],[[[3,[[2,[1]],1]],15],[[20,[4]]]],[[[3,[[2,[1]],1]],[3,[[2,[1]],1]]],[[20,[4]]]],[[[3,[[2,[1]],1]],12],[[20,[4]]]],[[[3,[[2,[1]],1]],15],[[20,[4]]]],[[[3,[[16,[[2,[1]]]],[2,[1]],1]],[3,[[2,[1]],1]]],5],0,[[]],[[],13],[[],21],[[],21],[[],22],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[1]]]],[[[11,[1]]]],[[[8,[1]]]],[[[7,[[0,[0,23,24,25,16,26,27,28]],1]],[29,[[0,[0,23,24,25,16,26,27,28]],1]]],5],[[[7,[[0,[0,0,23,24,25,16,26,27,28]],1]],[7,[[0,[0,0,23,24,25,16,26,27,28]],1]]],5],[[[14,[1]],[3,[[7,[13,1]],1]]],5],[[[11,[1]],[3,[[7,[[10,[9]],1]],1]]],5],[[[8,[1]],[3,[[7,[6,1]],1]]],5],[[[7,[[0,[0,23,24,25,16,26,27,28,23]],[0,[1,23]]]],17],18],[[[14,[[0,[1,23]]]],17],18],[[[11,[[0,[1,23]]]],17],18],[[[8,[[0,[1,23]]]],17],18],[[]],[[]],[[]],[[]],[[[7,[6,1]],[31,[[30,[15]]]]],[[32,[1]]]],[[[7,[[10,[9]],1]],[31,[30]]],[[33,[1]]]],[[[7,[13,1]],[31,[[30,[12]]]]],[[34,[1]]]],[[[14,[1]]],[[34,[1]]]],[[[11,[1]]],[[33,[1]]]],[[[8,[1]]],[[32,[1]]]],[[[7,[13,1]],12],[[14,[1]]]],[[[7,[[10,[9]],1]]],[[11,[1]]]],[[[7,[13,1]]],[[14,[1]]]],[[[7,[6,1]]],[[8,[1]]]],[[[7,[[10,[9]],1]]],[[11,[1]]]],[[]],[[]],[[]],[[]],[[],[[7,[[0,[0,23,24,25,16,26,27,28]]]]]],[[[7,[[0,[0,23,24,25,16,26,27,28]],1]]],[[35,[[3,[[7,[[0,[0,23,24,25,16,26,27,28]],1]],1]]]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[36,1],[[7,[[0,[0,23,24,25,16,26,27,28]],1]]]],[36,[[7,[[0,[0,23,24,25,16,26,27,28]],1]]]],[1,[[7,[[0,[0,23,24,25,16,26,27,28]],1]]]],[[],[[7,[[0,[0,23,24,25,16,26,27,28]],1]]]],0,0,0,0,0,0,0,[[]],[[]],[[[29,[[0,[0,23,24,25,16,26,27,28]],1]]],[[29,[[0,[0,23,24,25,16,26,27,28]],1]]]],[[]],[[],[[29,[[0,[0,23,24,25,16,26,27,28]],37]]]],[[[29,[[0,[0,23,24,25,16,26,27,28]],1]],[7,[[0,[0,23,24,25,16,26,27,28]],1]]],5],[[[29,[[0,[0,23,24,25,16,26,27,28]],1]],[29,[[0,[0,23,24,25,16,26,27,28]],1]]],5],[[[29,[[0,[0,23,24,25,16,26,27,28,23]],[0,[1,23]]]],17],18],[[]],[[[29,[13,1]],[31,[[30,[12]]]]],[[38,[1]]]],[[[29,[6,1]],[31,[[30,[15]]]]],[[39,[1]]]],[[[29,[[10,[9]],1]],[31,[30]]],[[40,[1]]]],[[]],[[[29,[[0,[0,23,24,25,16,26,27,28]],1]]],[[35,[[3,[[29,[[0,[0,23,24,25,16,26,27,28]],1]],1]]]]]],[[]],[[],21],[[],21],[[],22],[[36,1],[[29,[13,1]]]],[1,[[29,[13,1]]]]],"c":[],"p":[[8,"BuildHasher"],[8,"PoolKind"],[3,"Pooled"],[4,"Ordering"],[15,"bool"],[3,"PathBuf"],[3,"GlobalPool"],[3,"StaticPooledPath"],[15,"u8"],[3,"Vec"],[3,"StaticPooledBuffer"],[15,"str"],[3,"String"],[3,"StaticPooledString"],[3,"Path"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"Debug"],[8,"Clone"],[8,"Eq"],[8,"Hash"],[8,"Ord"],[8,"PartialOrd"],[3,"SharedPool"],[4,"Cow"],[8,"Into"],[6,"GlobalPath"],[6,"GlobalBuffer"],[6,"GlobalString"],[8,"FromIterator"],[15,"usize"],[3,"RandomState"],[6,"SharedString"],[6,"SharedPath"],[6,"SharedBuffer"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
